openapi: 3.0.4
info:
  version: '1.0'
  title: "AiLERT API"
  description: API for the AiLERT application.
  license:
    name: MIT

servers:
  - url: http://localhost:8080/api/v1
    description: Local development server
  - url: https://example.com/api/v1
    description: Production server

paths:
  /auth/login:
    post:
      summary: User Login
      description: Authenticate user and generate JWT token. **IMPORTANT:** Ensure to use HTTPS in production for security.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              dipendentecomunale:
                value:
                  email: 'john.doe@example.com'
                  password: 'securepassword123'
              amministratore:
                value:
                  email: 'bob@bob.com'
                  password: 'password'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /auth/changepass:
    post:
      summary: Change Password
      description: Change the user's password. Requires authentication.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newpassword:
                  type: string
                  description: New password
            examples:
              example1:
                value:
                  newpassword: 'newSecurePassword456'
                summary: Standard password change request
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the password change was successful
                  message:
                    type: string
                    description: Success message
              examples:
                success:
                  value:
                    success: true
                    message: 'Password changed successfully'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                samePassword:
                  value:
                    error: 'New password cannot be the same as the old password'
                    errorCode: 'SAME_PASSWORD'
        '401':
          description: Unauthorized access (invalid user)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                userNotFound:
                  value:
                    error: 'Invalid email'
                    errorCode: 'INVALID_EMAIL'
                authTokenRequired:
                  value:
                    error: 'Authentication token required'
                    errorCode: 'TOKEN_REQUIRED'
                invalidToken:
                  value:
                    error: 'Invalid or expired token'
                    errorCode: 'INVALID_TOKEN'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                serverError:
                  value:
                    error: 'Internal server error'
                    errorCode: 'INTERNAL_SERVER_ERROR'
  
  /public/events:
    get:
      summary: Ottieni eventi pubblici
      description: |
        Restituisce gli eventi pubblici delle ultime 2 ore. Non richiede autenticazione.
        Include solo eventi con status 'solved' o 'unsolved' per i cittadini.
      tags:
        - Public API
      responses:
        '200':
          description: Lista eventi pubblici ottenuta con successo
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicEvent'
              examples:
                publicEvents:
                  value:
                    - _id: "60d21b4667d0d8992e610c85"
                      type: "incidente"
                      title: "Incidente su Via Roma"
                      description: "Lieve tamponamento risolto"
                      eventDate: "2025-05-16T14:30:00.000Z"
                      location:
                        address: "Via Roma 45, Trento"
                      status: "solved"
                      severity: "bassa"
                    - _id: "60d21b4667d0d8992e610c86"
                      type: "ingorgo"
                      title: "Traffico intenso"
                      description: "Blocco temporaneo in centro"
                      eventDate: "2025-05-16T15:00:00.000Z"
                      location:
                        address: "Via Manci, Trento"
                      status: "unsolved"
                      severity: "media"
        '500':
          description: Errore del server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /events:
    get:
      summary: Ottieni tutti gli eventi
      description: Restituisce la lista di eventi. Richiede autenticazione.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Lista ottenuta con successo
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
              examples:
                exampleResponse:
                  summary: Esempio di lista eventi
                  value:
                    - type: incidente
                      title: "Auto contro semaforo"
                      description: "Incidente lieve senza feriti"
                      createdAt: "2025-05-15T09:42:01.646Z"
                      updatedAt: "2025-05-15T09:42:01.646Z"
                      eventDate: "2025-05-15T09:42:01.646Z"
                      location:
                        address: "Via Roma 1, Trento"
                      status: pending
                      cameraId: "665fe9b27d204f50ae7c8d4a"
                      videoUrl: "https://video.com/sample1.mp4"
                      confirmed: true
                      confirmedBy: "665fe9b27d204f50ae7c8d4a"
                      notifiedServices:
                        - service: ambulanza
                          notifiedAt: "2025-05-15T09:42:01.646Z"
                          responseTime: 7
                      severity: alta
                    - type: ingorgo
                      title: "Traffico in via Manci"
                      description: "Blocco temporaneo causa lavori"
                      createdAt: "2025-05-14T08:20:00.000Z"
                      updatedAt: "2025-05-14T08:45:00.000Z"
                      eventDate: "2025-05-14T08:00:00.000Z"
                      location:
                        address: "Via Manci, Trento"
                      status: solved
                      cameraId: "665fe9b27d204f50ae7c8d4a"
                      videoUrl: "https://video.com/sample2.mp4"
                      confirmed: false
                      severity: media
        '401':
          description: Utente non autenticato
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidToken:
                  value:
                    error: 'Unauthorized role'
                    errorCode: 'UNAUTHORIZED_ROLE'
    post:
      summary: Crea un nuovo evento
      description: Registra un nuovo evento (incidente o ingorgo). Richiede autenticazione.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
            examples:
              validEventExample:
                summary: Esempio valido per test POST
                value:
                  type: incidente
                  title: "Auto contro semaforo"
                  description: "Incidente con danni leggeri"
                  eventDate: "2025-05-15T09:42:01.646Z"
                  location:
                    address: "Via Verdi 10, Trento"
                  status: pending
                  cameraId: "665fe9b27d204f50ae7c8d4a"
                  videoUrl: "https://video.com/sample.mp4"
                  confirmed: true
                  confirmedBy: "665fe9b27d204f50ae7c8d4a"
                  notifiedServices:
                    - service: polizia
                      notifiedAt: "2025-05-15T09:42:01.646Z"
                      responseTime: 5
                  severity: media
      responses:
        '201':
          description: Evento creato con successo
        '400':
          description: Errore nei dati inviati
        '401':
          description: Utente non autenticato
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidToken:
                  value:
                    error: 'Unauthorized role'
                    errorCode: 'UNAUTHORIZED_ROLE'
  

  # Admin endpoints
  /admin:
    get:
      summary: Get all users
      description: Retrieves a list of all users. Requires admin role authentication.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              examples:
                userList:
                  value:
                    - _id: "60d21b4667d0d8992e610c85"
                      email: "admin@example.com"
                      name: "Admin User"
                      role: "amministratore"
                      hash: "hashedpassword"
                    - _id: "60d21b4667d0d8992e610c86"
                      email: "user@example.com"
                      name: "Regular User"
                      role: "dipendentecomunale"
                      hash: "hashedpassword"
        '401':
          description: Unauthorized access (invalid token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                tokenRequired:
                  value:
                    error: 'Authentication token required'
                    errorCode: 'TOKEN_REQUIRED'
                invalidToken:
                  value:
                    error: 'Invalid or expired token'
                    errorCode: 'INVALID_TOKEN'
        '403':
          description: Forbidden access (user is not an admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                unauthorizedRole:
                  value:
                    error: 'Unauthorized role'
                    errorCode: 'UNAUTHORIZED_ROLE'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                serverError:
                  value:
                    error: 'Internal server error'
                    errorCode: 'INTERNAL_SERVER_ERROR'
                    
    post:
      summary: Create new user
      description: Creates a new user in the system. Requires admin role authentication.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
            examples:
              createAdmin:
                value:
                  email: "newadmin@example.com"
                  password: "securePassword123"
                  name: "New Admin"
                  role: "amministratore"
              createUser:
                value:
                  email: "newuser@example.com"
                  password: "userPassword456"
                  name: "New Employee"
                  role: "dipendentecomunale"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
              examples:
                userCreated:
                  value:
                    success: true
                    message: "User created successfully"
                    user: 
                      _id: "60d21b4667d0d8992e610c85"
                      email: "admin@example.com"
                      name: "Admin User"
                      role: "amministratore"
                      hash: "hashedpassword"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missingFields:
                  value:
                    error: 'All fields are required'
                    errorCode: 'MISSING_FIELDS'
                userExists:
                  value:
                    error: 'User already exists'
                    errorCode: 'USER_ALREADY_EXISTS'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                duplicateEmail:
                  value:
                    error: "E11000 duplicate key error collection: users index: email_1 dup key"
                serverError:
                  value:
                    error: 'Internal server error'
                    errorCode: 'INTERNAL_SERVER_ERROR'
                    
  /admin/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: The user ID
        schema:
          type: string
    get:
      summary: Get user by ID
      description: Retrieves a specific user by their ID. Requires admin role authentication.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                adminUser:
                  value:
                    _id: "60d21b4667d0d8992e610c85"
                    email: "admin@example.com"
                    name: "Admin User"
                    role: "amministratore"
                    hash: "hashedpassword"
                regularUser:
                  value:
                    _id: "60d21b4667d0d8992e610c86"
                    email: "user@example.com"
                    name: "Regular User"
                    role: "dipendentecomunale"
                    hash: "hashedpassword"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                userNotFound:
                  value:
                    error: 'User not found'
                    errorCode: 'USER_NOT_FOUND'
        '500':
          $ref: '#/components/responses/InternalServerError'
          
    put:
      summary: Update user
      description: Updates an existing user's information. Requires admin role authentication.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
            examples:
              updateRole:
                value:
                  role: "amministratore"
              updateEmail:
                value:
                  email: "updated@example.com"
              updateName:
                value:
                  name: "Updated Name"
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                updatedUser:
                  value:
                    _id: "60d21b4667d0d8992e610c85"
                    email: "updated@example.com"
                    name: "Updated Name"
                    role: "amministratore"
                    hash: "hashedpassword"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                emailInUse:
                  value:
                    error: 'Email already in use'
                    errorCode: 'EMAIL_ALREADY_IN_USE'
                serverError:
                  value:
                    error: 'Internal server error'
                    errorCode: 'INTERNAL_SERVER_ERROR'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Forbidden access (user is not an admin or attempting to modify their own account)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                unauthorizedRole:
                  value:
                    error: 'Unauthorized role'
                    errorCode: 'UNAUTHORIZED_ROLE'
                selfModification:
                  value:
                    error: 'Cannot modify your own account'
                    errorCode: 'SELF_MODIFICATION_FORBIDDEN'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                userNotFound:
                  value:
                    error: 'User not found'
                    errorCode: 'USER_NOT_FOUND'
                    
    delete:
      summary: Delete user
      description: Deletes a user from the system. Requires admin role authentication.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
              examples:
                deletedSuccess:
                  value:
                    message: "User deleted successfully"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Forbidden access (user is not an admin or attempting to delete their own account)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                unauthorizedRole:
                  value:
                    error: 'Unauthorized role'
                    errorCode: 'UNAUTHORIZED_ROLE'
                selfDeletion:
                  value:
                    error: 'Cannot delete your own account'
                    errorCode: 'SELF_DELETION_FORBIDDEN'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                userNotFound:
                  value:
                    error: 'User not found'
                    errorCode: 'USER_NOT_FOUND'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Stream API endpoints
  /stream/list:
    get:
      summary: Ottieni tutti gli stream attivi
      description: Restituisce la lista di stream attivi disponibili. Richiede autenticazione.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Lista di stream ottenuta con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indica se la richiesta è andata a buon fine
                  streams:
                    type: array
                    items:
                      $ref: '#/components/schemas/StreamResponse'
              examples:
                success:
                  value:
                    success: true
                    streams: [
                      {
                        _id: "60d21b4667d0d8992e610c85",
                        cameraId: "68266cd1683978f9108a7393",
                        streamKey: "stream_test_manuale",
                        streamUrl: "rtsp://example.com/stream1",
                        isActive: true,
                        startTime: "2025-05-14T10:00:00Z",
                        viewCount: 5
                      }
                    ]
        '401':
          description: Utente non autenticato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Errore del server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                error:
                  value:
                    error: 'Errore interno del server'
                    errorCode: 'SERVER_ERROR'

  /stream:
    post:
      summary: Crea un nuovo stream
      description: Crea un nuovo stream per una telecamera. Richiede autenticazione.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cameraId:
                  type: string
                  description: ID della telecamera associata allo stream
                streamKey:
                  type: string
                  description: Chiave identificativa dello stream
                streamUrl:
                  type: string
                  description: URL dello stream
                streamType:
                  type: string
                  enum: [rtsp, hls, webrtc]
                  description: Tipo di stream
              required:
                - cameraId
                - streamUrl
                - streamType
            examples:
              example1:
                value:
                  cameraId: "68266cd1683978f9108a7393"
                  streamKey: "stream_test_manuale"
                  streamUrl: "rtsp://example.com/stream1"
                  streamType: "rtsp"
      responses:
        '201':
          description: Stream creato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indica se la richiesta è andata a buon fine
                  stream:
                    $ref: '#/components/schemas/StreamDetails'
              examples:
                created:
                  value:
                    success: true
                    stream: {
                      _id: "60d21b4667d0d8992e610c85",
                      cameraId: "68266cd1683978f9108a7393",
                      streamKey: "stream_test_manuale",
                      streamUrl: "rtsp://example.com/stream1",
                      isActive: true,
                      startTime: "2025-05-14T10:00:00Z",
                      streamType: "rtsp",
                      viewCount: 0
                    }
        '400':
          description: Campi obbligatori mancanti
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missingFields:
                  value:
                    error: 'Campi obbligatori mancanti'
                    errorCode: 'MISSING_FIELDS'
        '401':
          description: Utente non autenticato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Errore del server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                error:
                  value:
                    error: 'Errore nella creazione dello stream'
                    errorCode: 'SERVER_ERROR'

  /stream/{streamId}:
    get:
      summary: Ottieni dettagli di uno stream specifico
      description: Restituisce i dettagli di uno stream specifico. Richiede autenticazione.
      security:
        - BearerAuth: []
      parameters:
        - name: streamId
          in: path
          required: true
          description: ID dello stream
          schema:
            type: string
      responses:
        '200':
          description: Dettagli dello stream ottenuti con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indica se la richiesta è andata a buon fine
                  stream:
                    $ref: '#/components/schemas/StreamDetails'
        '401':
          description: Utente non autenticato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Stream non trovato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFound:
                  value:
                    error: 'Stream not found'
                    errorCode: 'STREAM_NOT_FOUND'
        '500':
          description: Errore del server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                error:
                  value:
                    error: 'Failed to retrieve stream'
                    errorCode: 'STREAM_FETCH_ERROR'
    put:
      summary: Aggiorna un stream esistente
      description: Modifica i parametri di uno stream esistente. Richiede autenticazione.
      security:
        - BearerAuth: []
      parameters:
        - name: streamId
          in: path
          required: true
          description: ID dello stream da aggiornare
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                streamKey:
                  type: string
                  description: Chiave identificativa dello stream
                streamUrl:
                  type: string
                  description: URL dello stream
                isActive:
                  type: boolean
                  description: Stato di attività dello stream
                streamType:
                  type: string
                  enum: [rtsp, hls, webrtc]
                  description: Tipo di stream
            examples:
              updateStream:
                value:
                  streamKey: "new_stream_key"
                  isActive: true
      responses:
        '200':
          description: Stream aggiornato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indica se la richiesta è andata a buon fine
                  stream:
                    $ref: '#/components/schemas/StreamDetails'
              examples:
                success:
                  value:
                    success: true
                    stream: {
                      _id: "60d21b4667d0d8992e610c85",
                      cameraId: "68266cd1683978f9108a7393",
                      streamKey: "new_stream_key",
                      streamUrl: "rtsp://example.com/stream1",
                      isActive: true,
                      startTime: "2025-05-14T10:00:00Z",
                      streamType: "rtsp",
                      viewCount: 5
                    }
        '400':
          description: Dati di aggiornamento non validi
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Utente non autenticato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Stream non trovato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFound:
                  value:
                    error: 'Stream not found'
                    errorCode: 'STREAM_NOT_FOUND'
        '500':
          description: Errore del server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                error:
                  value:
                    error: 'Errore interno del server'
                    errorCode: 'SERVER_ERROR'

  /stream/{streamId}/end:
    put:
      summary: Termina uno stream
      description: Imposta isActive=false e aggiunge endTime allo stream. Richiede autenticazione.
      security:
        - BearerAuth: []
      parameters:
        - name: streamId
          in: path
          required: true
          description: ID dello stream da terminare
          schema:
            type: string
      responses:
        '200':
          description: Stream terminato con successo
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indica se la richiesta è andata a buon fine
                  stream:
                    $ref: '#/components/schemas/StreamDetails'
              examples:
                success:
                  value:
                    success: true
                    stream: {
                      _id: "60d21b4667d0d8992e610c85",
                      cameraId: "68266cd1683978f9108a7393",
                      streamKey: "stream_test_manuale",
                      streamUrl: "rtsp://example.com/stream1",
                      isActive: false,
                      startTime: "2025-05-14T10:00:00Z",
                      endTime: "2025-05-14T11:30:00Z",
                      streamType: "rtsp",
                      viewCount: 7
                    }
        '401':
          description: Utente non autenticato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Stream non trovato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFound:
                  value:
                    error: 'Stream not found'
                    errorCode: 'STREAM_NOT_FOUND'
        '500':
          description: Errore del server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                error:
                  value:
                    error: 'Errore nella terminazione dello stream'
                    errorCode: 'SERVER_ERROR'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: User's email address
        password:
          type: string
          description: User's password
          format: password

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT access token
        success:
          type: boolean
          description: Whether the login was successful
        user:
          type: object
          properties:
            email:
              type: string
              description: User's email address
            name:
              type: string
              description: User's full name
            role:
              type: string
              description: User's role
              enum: [amministratore, sorvegliante, dipendentecomunale]

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
        errorCode:
          type: string
          description: Specific error code for the failure
    
    Event:
      type: object
      properties:
        type:
          type: string
          enum: [incidente, ingorgo]
        title:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        eventDate:
          type: string
          format: date-time
        location:
          type: object
          properties:
            address:
              type: string
        status:
          type: string
          enum: [pending, solved, unsolved, false_alarm]
        cameraId:
          type: string
        videoUrl:
          type: string
        confirmed:
          type: boolean
        confirmedBy:
          type: string
        notifiedServices:
          type: array
          items:
            type: object
            properties:
              service:
                type: string
                enum: [polizia, carabinieri, vigili_del_fuoco, ambulanza, protezione_civile]
              notifiedAt:
                type: string
                format: date-time
              responseTime:
                type: number
        severity:
          type: string
          enum: [bassa, media, alta]
    
    PublicEvent:
      description: "Versione pubblica di un evento per cittadini non autenticati"
      type: object
      properties:
        _id:
          type: string
          description: ID dell'evento
        type:
          type: string
          enum: [incidente, ingorgo]
          description: Tipo di evento
        title:
          type: string
          description: Titolo dell'evento
        description:
          type: string
          description: Descrizione dell'evento
        eventDate:
          type: string
          format: date-time
          description: Data e ora dell'evento
        location:
          type: object
          properties:
            address:
              type: string
              description: Indirizzo dell'evento
        status:
          type: string
          enum: [solved, unsolved]
          description: Stato dell'evento (solo eventi risolti o non risolti)
        severity:
          type: string
          enum: [bassa, media, alta]
          description: Gravità dell'evento

    User:
      type: object
      properties:
        _id:
          type: string
          description: User unique identifier
        email:
          type: string
          description: User's email address
        name:
          type: string
          description: User's full name
        role:
          type: string
          description: User's role
          enum: [amministratore, sorvegliante, dipendentecomunale]
        hash:
          type: string
          description: User's hashed password
          
    CreateUserRequest:
      type: object
      required:
        - email
        - password
        - name
        - role
      properties:
        email:
          type: string
          description: User's email address
        password:
          type: string
          description: User's password
          format: password
        name:
          type: string
          description: User's full name
        role:
          type: string
          description: User's role
          enum: [amministratore, sorvegliante, dipendentecomunale]
          
    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          description: User's email address
        name:
          type: string
          description: User's full name
        role:
          type: string
          description: User's role
          enum: [amministratore, sorvegliante, dipendentecomunale]
    
    Camera:
      description: "Rappresenta una telecamera installata nel sistema di videosorveglianza."
      type: object
      properties:
        id:
          type: string
          description: ID della telecamera
        name:
          type: string
          description: Nome della telecamera
        location:
          type: object
          properties:
            address:
              type: string
              description: Indirizzo dove è installata la telecamera
        installationDate:
          type: string
          format: date-time
          description: Data di installazione
        lastMaintenance:
          type: string
          format: date-time
          description: Data dell'ultima manutenzione
        isActive:
          type: boolean
          description: Indica se la telecamera è attiva
        ipAddress:
          type: string
          description: Indirizzo IP della telecamera
        streamUrl:
          type: string
          description: URL RTSP originale della telecamera
        modelInfo:
          type: object
          properties:
            brand:
              type: string
              description: Marca della telecamera
            model:
              type: string
              description: Modello della telecamera

    StreamResponse:
      description: "Rappresentazione di uno stream nella risposta della lista di stream attivi"
      type: object
      properties:
        _id:
          type: string
          description: ID dello stream
        cameraId:
          type: string
          description: ID della telecamera associata
        streamKey:
          type: string
          description: Chiave identificativa dello stream
        streamUrl:
          type: string
          description: URL dello stream
        isActive:
          type: boolean
          description: Indica se lo stream è attivo
        startTime:
          type: string
          format: date-time
          description: Data e ora di inizio dello stream
        endTime:
          type: string
          format: date-time
          description: Data e ora di fine dello stream (se terminato)
        streamType:
          type: string
          enum: [rtsp, hls, webrtc]
          description: Tipo di stream
        viewCount:
          type: integer
          description: Numero di visualizzazioni
        lastAccessed:
          type: string
          format: date-time
          description: Ultima volta che lo stream è stato visualizzato

    StreamDetails:
      description: "Dettagli completi di uno stream specifico"
      type: object
      properties:
        _id:
          type: string
          description: ID dello stream
        cameraId:
          type: string
          description: ID della telecamera associata
        streamKey:
          type: string
          description: Chiave identificativa dello stream
        streamUrl:
          type: string
          description: URL dello stream
        isActive:
          type: boolean
          description: Indica se lo stream è attivo
        startTime:
          type: string
          format: date-time
          description: Data e ora di inizio dello stream
        endTime:
          type: string
          format: date-time
          description: Data e ora di fine dello stream (se terminato)
        streamType:
          type: string
          enum: [rtsp, hls, webrtc]
          description: Tipo di stream
        viewCount:
          type: integer
          description: Numero di visualizzazioni
        lastAccessed:
          type: string
          format: date-time
          description: Ultima volta che lo stream è stato visualizzato
  
  responses:
    Unauthorized:
      description: Unauthorized access (invalid token)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            tokenRequired:
              value:
                error: 'Authentication token required'
                errorCode: 'TOKEN_REQUIRED'
            invalidToken:
              value:
                error: 'Invalid or expired token'
                errorCode: 'INVALID_TOKEN'
    
    Forbidden:
      description: Forbidden access (user is not an admin or attempting unauthorized action)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            unauthorizedRole:
              value:
                error: 'Unauthorized role'
                errorCode: 'UNAUTHORIZED_ROLE'
            selfModification:
              value:
                error: 'Cannot modify your own account'
                errorCode: 'SELF_MODIFICATION_FORBIDDEN'
            selfDeletion:
              value:
                error: 'Cannot delete your own account'
                errorCode: 'SELF_DELETION_FORBIDDEN'
    
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            serverError:
              value:
                error: 'Internal server error'
                errorCode: 'INTERNAL_SERVER_ERROR'