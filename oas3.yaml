openapi: 3.0.4
info:
    version: "1.0"
    title: "AiLERT API"
    description: |
        API for the AiLERT application.

        This API provides endpoints for managing emergency events, user authentication, 
        surveillance streams, and administrative functions. It facilitates real-time 
        monitoring and response to urban incidents like traffic accidents and congestion.

        Proper authentication is required for most endpoints, with different access levels
        based on user roles (administrator, municipal employee, or surveillance officer).
    license:
        name: MIT

servers:
    - url: http://localhost:8080/api/v1
      description: Local development server
    - url: https://ailert.onrender.com/api/v1
      description: Production server

tags:
    - name: Authentication
      description: User authentication endpoints for login, password resets, and token management
    - name: Public API
      description: Publicly accessible endpoints that require no authentication, providing limited access to event data for citizens
    - name: Events
      description: Complete event management including creation, retrieval, updates, and deletion of urban incidents and traffic events
    - name: Users
      description: Administrative endpoints for user account management - create, update, retrieve, and delete users (admin access only)
    - name: User Profile
      description: Endpoints for users to manage their own profile information and credentials
    - name: Streams
      description: Video stream management for surveillance cameras, including creation, monitoring, and control

paths:
    /auth/login:
        post:
            summary: User Login
            description: |
                Authenticates a user with email and password credentials and generates a JWT token for subsequent API requests.
                This token must be included in the Authorization header for authenticated endpoints.
                Different user roles (amministratore, dipendentecomunale, sorvegliante) receive different access permissions.
                The token includes user information and expires after a defined period.
            tags:
                - Authentication
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/LoginRequest"
                        examples:
                            dipendentecomunale:
                                value:
                                    email: "john.doe@example.com"
                                    password: "securepassword123"
                            amministratore:
                                value:
                                    email: "admin@comune.it"
                                    password: "password123"
            responses:
                "200":
                    description: |
                        Authentication successful. Returns a JWT token that should be included in subsequent API requests
                        as a Bearer token in the Authorization header. Also returns basic user information.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/LoginResponse"
                "401":
                    description: |
                        Authentication failed due to invalid credentials. Could be because the email doesn't exist
                        in the system or the password doesn't match the stored credentials.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                            examples:
                                invalidEmail:
                                    value:
                                        error: "Invalid email"
                                        errorCode: "INVALID_EMAIL"
                                invalidPassword:
                                    value:
                                        error: "Invalid password"
                                        errorCode: "INVALID_PASSWORD"
    /auth/passwordresets:
        post:
            summary: Request Password Reset
            description: |
                Initiates the password reset flow for a user who has forgotten their password.
                For security reasons, the endpoint always returns a success response regardless of whether the email exists
                in the system. If the email exists, the system will send a password reset link to the user's email address.
                The link will contain a temporary token that expires after a short period.

                No authentication is required for this endpoint.
            tags:
                - Authentication
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    format: email
                                    description: Email address of the user requesting password reset
                            required:
                                - email
                        examples:
                            validRequest:
                                value:
                                    email: "john.doe@example.com"
            responses:
                "200":
                    description: Password reset request processed (always returns success for security)
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                    message:
                                        type: string
                            examples:
                                success:
                                    value:
                                        success: true
                                        message: "If the email exists in our system, you will receive password reset instructions"
                "400":
                    description: Bad request - Invalid email format
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                            examples:
                                invalidEmail:
                                    value:
                                        error: "Invalid email format"
                                        errorCode: "INVALID_EMAIL_FORMAT"
                                missingEmail:
                                    value:
                                        error: "Email is required"
                                        errorCode: "MISSING_EMAIL"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /public/events:
        get:
            summary: Obtain public events
            description: |
                Returns a list of events from the last 2 hours that are suitable for public viewing.
                This endpoint is designed for citizen-facing interfaces.

                Important filtering applied:
                - Only includes events from the past 2 hours
                - Only includes events with status 'solved' or 'unsolved'
                - Sensitive information is removed from the response
                - No authentication is required

                This endpoint helps keep citizens informed about current traffic conditions and incidents
                while protecting sensitive operational details.
            tags:
                - Public API
            responses:
                "200":
                    description: |
                        Successfully retrieved the list of public events. The response is an array of events
                        with limited information suitable for public viewing. Each event includes basic details
                        like location, type, status, and severity, but excludes sensitive operational information.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/PublicEvent"
                            examples:
                                publicEvents:
                                    value:
                                        - _id: "60d21b4667d0d8992e610c85"
                                          type: "incidente"
                                          title: "Incidente su Via Roma"
                                          description: "Tamponamento tra due veicoli, corsia parzialmente bloccata"
                                          eventDate: "2025-05-16T14:30:00.000Z"
                                          location:
                                              address: "Via Roma 45, Trento"
                                          status: "solved"
                                          severity: "bassa"
                                        - _id: "60d21b4667d0d8992e610c86"
                                          type: "ingorgo"
                                          title: "Traffico intenso in centro"
                                          description: "Rallentamenti significativi causa lavori stradali"
                                          eventDate: "2025-05-16T15:00:00.000Z"
                                          location:
                                              address: "Via Manci, Trento"
                                          status: "unsolved"
                                          severity: "media"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /events:
        get:
            summary: Get all events
            description: |
                Retrieves a comprehensive list of all events in the system with complete details.
                This endpoint is intended for municipal employees and administrators to monitor
                and manage all urban incidents and traffic situations.

                The response includes full event information including:
                - Event identification and classification
                - Timestamps for creation and updates
                - Location details
                - Status and severity information
                - Camera and video evidence links
                - Confirmation status and authority
                - Emergency services notification history

                Results are typically ordered by creation date (newest first).
                Requires valid authentication token with appropriate permissions.
            tags:
                - Events
            security:
                - BearerAuth: []
            responses:
                "200":
                    description: |
                        Successfully retrieved the list of all events with complete details.
                        Municipal employees can use this data to track, manage, and respond to
                        urban incidents. Each event contains comprehensive information about
                        its status, location, confirmation, and emergency response history.
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Event"
                            examples:
                                exampleResponse:
                                    summary: Example response for GET /events
                                    value:
                                        - _id: "60d21b4667d0d8992e610c85"
                                          type: "incidente"
                                          title: "Auto contro semaforo su Via Roma"
                                          description: "Incidente lieve senza feriti, danneggiamento del semaforo all'incrocio principale"
                                          createdAt: "2025-05-15T09:42:01.646Z"
                                          updatedAt: "2025-05-15T09:42:01.646Z"
                                          eventDate: "2025-05-15T09:42:01.646Z"
                                          location:
                                              address: "Via Roma 1, Trento"
                                              coordinates: [11.1207, 46.0678]
                                          status: "pending"
                                          cameraId: "665fe9b27d204f50ae7c8d4a"
                                          videoUrl: "https://video.com/sample1.mp4"
                                          confirmed: true
                                          confirmedBy: "665fe9b27d204f50ae7c8d4a"
                                          notifiedServices:
                                              - service: "ambulanza"
                                                notifiedAt: "2025-05-15T09:42:01.646Z"
                                                responseTime: 7
                                          severity: "alta"
                                        - _id: "60d21b4667d0d8992e610c86"
                                          type: "ingorgo"
                                          title: "Traffico intenso in Via Manci"
                                          description: "Blocco temporaneo causa lavori di manutenzione stradale, durata prevista 2 ore"
                                          createdAt: "2025-05-14T08:20:00.000Z"
                                          updatedAt: "2025-05-14T08:45:00.000Z"
                                          eventDate: "2025-05-14T08:00:00.000Z"
                                          location:
                                              address: "Via Manci, Trento"
                                              coordinates: [11.1252, 46.0693]
                                          status: "solved"
                                          cameraId: "665fe9b27d204f50ae7c8d4a"
                                          videoUrl: "https://video.com/sample2.mp4"
                                          confirmed: false
                                          severity: "media"
                "401":
                    $ref: "#/components/responses/Unauthorized"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "500":
                    $ref: "#/components/responses/InternalServerError"
        post:
            summary: Create new event
            description: |
                Creates a new urban event or incident in the system. This endpoint is used when a new
                incident is detected, either automatically by AI systems or manually by surveillance officers.

                Required information includes:
                - Event type (accident or traffic jam)
                - Title and description
                - Event date and time
                - Location details
                - Status (typically starts as 'pending')
                - Associated camera ID (if applicable)
                - Video evidence URL (if available)
                - Confirmation status and authority
                - Severity assessment

                Optional information:
                - Emergency services that have been notified
                - Response times

                The created event will automatically have creation and update timestamps added.
                Requires valid authentication with appropriate permissions.
            tags:
                - Events
            security:
                - BearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Event"
                        examples:
                            validEventExample:
                                summary: Example of a valid accident event creation request
                                value:
                                    type: "incidente"
                                    title: "Auto contro semaforo all'incrocio centrale"
                                    description: "Collisione di una Fiat Panda contro il semaforo pedonale. Danni visibili al veicolo e all'infrastruttura. Nessun ferito apparente."
                                    eventDate: "2025-05-15T09:42:01.646Z"
                                    location:
                                        address: "Via Verdi 10, Trento"
                                        coordinates: [11.1230, 46.0665]
                                    status: "pending"
                                    cameraId: "665fe9b27d204f50ae7c8d4a"
                                    videoUrl: "https://video.com/sample.mp4"
                                    confirmed: true
                                    confirmedBy: "665fe9b27d204f50ae7c8d4a"
                                    notifiedServices:
                                        - service: "polizia"
                                          notifiedAt: "2025-05-15T09:42:01.646Z"
                                          responseTime: 5
                                    severity: "media"
            responses:
                "201":
                    description: Event created successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Event"
                "401":
                    $ref: "#/components/responses/Unauthorized"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /events/{id}:
        parameters:
            - name: id
              in: path
              required: true
              description: The event ID
              schema:
                  type: string
        get:
            summary: Get event by ID
            description: |
                Retrieves detailed information about a specific event identified by its unique ID.
                This endpoint provides the complete event record with all available information,
                including creation metadata, status updates, confirmation details, and notification history.

                Used for:
                - Viewing detailed information about a specific incident
                - Checking the current status of an emergency response
                - Verifying what services have been notified
                - Accessing evidence like video footage

                The event ID is typically obtained from the list of events or from notification systems.
                Requires valid authentication with appropriate permissions.
            tags:
                - Events
            security:
                - BearerAuth: []
            responses:
                "200":
                    description: |
                        Successfully retrieved the specified event with all available details.
                        This comprehensive record includes all metadata, status information,
                        location data, confirmation details, and response tracking.
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Event"
                            examples:
                                eventExample:
                                    value:
                                        _id: "60d21b4667d0d8992e610c85"
                                        type: "incidente"
                                        title: "Auto contro semaforo all'incrocio principale"
                                        description: "Veicolo Fiat Punto ha urtato il semaforo causando danni alla segnaletica. Conducente illeso, ma necessaria riparazione dell'impianto semaforico."
                                        createdAt: "2025-05-15T09:42:01.646Z"
                                        updatedAt: "2025-05-15T09:42:01.646Z"
                                        eventDate: "2025-05-15T09:42:01.646Z"
                                        location:
                                            address: "Via Roma 1, Trento"
                                            coordinates: [11.1207, 46.0678]
                                        status: "pending"
                                        cameraId: "665fe9b27d204f50ae7c8d4a"
                                        videoUrl: "https://video.com/sample1.mp4"
                                        confirmed: true
                                        confirmedBy: "665fe9b27d204f50ae7c8d4a"
                                        notifiedServices:
                                            - service: "ambulanza"
                                              notifiedAt: "2025-05-15T09:42:01.646Z"
                                              responseTime: 7
                                            - service: "polizia"
                                              notifiedAt: "2025-05-15T09:45:23.000Z"
                                              responseTime: 12
                                        severity: "alta"
                "400":
                    description: Bad request - Invalid ID format
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                            examples:
                                invalidId:
                                    value:
                                        error: "Specified ID is not valid format"
                                        errorCode: "INVALID_ID"
                "401":
                    $ref: "#/components/responses/Unauthorized"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "404":
                    description: Event not found
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                            examples:
                                eventNotFound:
                                    value:
                                        error: "Event not found"
                                        errorCode: "EVENT_NOT_FOUND"
                "500":
                    $ref: "#/components/responses/InternalServerError"

        patch:
            summary: Update event by ID
            description: |
                Updates an existing event's information. This endpoint allows partial updates,
                meaning you can send only the fields that need to be changed.

                Common update scenarios include:
                - Changing the event status (e.g., from 'pending' to 'solved')
                - Updating the description with new information
                - Adding notification records for emergency services
                - Marking an event as confirmed after verification

                The system automatically updates the 'updatedAt' timestamp when changes are made.
                Only authorized personnel can update events, and the original creation data is preserved.
                Requires valid authentication with appropriate permissions.
            tags:
                - Events
            security:
                - BearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Event"
                        examples:
                            updateEventExample:
                                summary: Example of updating an event status and details
                                value:
                                    status: "solved"
                                    description: "Incidente risolto. Veicolo rimosso e semaforo temporaneamente sostituito con segnaletica. Squadra tecnica programmata per riparazione definitiva domani mattina."
                                    severity: "bassa"
                                    notifiedServices:
                                        - service: "polizia"
                                          notifiedAt: "2025-05-15T09:45:00.000Z"
                                          responseTime: 8
            responses:
                "200":
                    description: Event updated successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Event"
                            examples:
                                updatedEvent:
                                    value:
                                        _id: "60d21b4667d0d8992e610c85"
                                        type: "incidente"
                                        title: "Auto contro semaforo all'incrocio principale"
                                        description: "Incidente risolto. Veicolo rimosso e semaforo temporaneamente sostituito con segnaletica. Squadra tecnica programmata per riparazione definitiva domani mattina."
                                        createdAt: "2025-05-15T09:42:01.646Z"
                                        updatedAt: "2025-05-15T10:15:00.000Z"
                                        eventDate: "2025-05-15T09:42:01.646Z"
                                        location:
                                            address: "Via Roma 1, Trento"
                                            coordinates: [11.1207, 46.0678]
                                        status: "solved"
                                        cameraId: "665fe9b27d204f50ae7c8d4a"
                                        videoUrl: "https://video.com/sample1.mp4"
                                        confirmed: true
                                        confirmedBy: "665fe9b27d204f50ae7c8d4a"
                                        notifiedServices:
                                            - service: "polizia"
                                              notifiedAt: "2025-05-15T09:45:00.000Z"
                                              responseTime: 8
                                        severity: "bassa"
                "400":
                    description: Bad request - Invalid ID format
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                            examples:
                                invalidId:
                                    value:
                                        error: "Specified ID is not valid format"
                                        errorCode: "INVALID_ID"
                "401":
                    $ref: "#/components/responses/Unauthorized"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "404":
                    description: Event not found
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                            examples:
                                eventNotFound:
                                    value:
                                        error: "Event not found"
                                        errorCode: "EVENT_NOT_FOUND"
                "500":
                    $ref: "#/components/responses/InternalServerError"

        delete:
            summary: Delete event by ID
            description: |
                Permanently removes an event from the system. This operation cannot be undone.

                Deletion should be used carefully, typically in these situations:
                - False alarms that were incorrectly entered
                - Test data that needs to be removed
                - Events that were duplicated in error

                For most situations where an event is no longer active, it's better to update its
                status to 'solved' or 'false_alarm' rather than deleting it, to maintain a historical record.

                Requires valid authentication with appropriate permissions.
            tags:
                - Events
            security:
                - BearerAuth: []
            responses:
                "200":
                    description: Event deleted successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                        description: Whether the deletion was successful
                                    message:
                                        type: string
                                        description: Success message
                            examples:
                                deletedSuccess:
                                    value:
                                        success: true
                                        message: "Event deleted successfully"
                "400":
                    description: Bad request - Invalid ID format
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                            examples:
                                invalidId:
                                    value:
                                        error: "Specified ID is not valid format"
                                        errorCode: "INVALID_ID"
                "401":
                    $ref: "#/components/responses/Unauthorized"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "404":
                    description: Event not found
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                            examples:
                                eventNotFound:
                                    value:
                                        error: "Event not found"
                                        errorCode: "EVENT_NOT_FOUND"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    # Admin endpoints
    /users:
        get:
            summary: Get all users
            description: |
                Retrieves a list of all users registered in the system. This administrative endpoint
                allows for user management and auditing of system access.

                The response includes details about each user, including:
                - User ID
                - Email address
                - Full name
                - Role assignment
                - Password hash (for verification purposes)

                Results can be optionally filtered by role using the query parameter.
                This allows administrators to view specific user categories like all administrators,
                all municipal employees, or all surveillance officers.

                This endpoint is restricted to administrators only.
            tags:
                - Users
            security:
                - BearerAuth: []
            parameters:
                - name: role
                  in: query
                  required: false
                  description: Filter users by role
                  schema:
                      type: string
                      enum: [amministratore, dipendentecomunale, sorvegliante]
                  examples:
                      amministratore:
                          value: amministratore
                          summary: Filter for admin users
                      dipendentecomunale:
                          value: dipendentecomunale
                          summary: Filter for municipal employees
                      sorvegliante:
                          value: sorvegliante
                          summary: Filter for surveillance users
            responses:
                "200":
                    description: List of users retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/User"
                            examples:
                                allUsers:
                                    summary: All users (no role filter)
                                    value:
                                        - _id: "60d21b4667d0d8992e610c85"
                                          email: "admin@comune.it"
                                          name: "Mario Rossi"
                                          role: "amministratore"
                                          hash: "hashedpassword"
                                        - _id: "60d21b4667d0d8992e610c86"
                                          email: "dipendente@comune.it"
                                          name: "Laura Bianchi"
                                          role: "dipendentecomunale"
                                          hash: "hashedpassword"
                                        - _id: "60d21b4667d0d8992e610c87"
                                          email: "sorvegliante@comune.it"
                                          name: "Giuseppe Verdi"
                                          role: "sorvegliante"
                                          hash: "hashedpassword"
                                filteredAdmins:
                                    summary: Filtered admin users only
                                    value:
                                        - _id: "60d21b4667d0d8992e610c85"
                                          email: "admin@comune.it"
                                          name: "Mario Rossi"
                                          role: "amministratore"
                                          hash: "hashedpassword"
                                        - _id: "60d21b4667d0d8992e610c88"
                                          email: "admin2@comune.it"
                                          name: "Anna Neri"
                                          role: "amministratore"
                                          hash: "hashedpassword"
                "400":
                    description: Bad request - Invalid role specified
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                            examples:
                                invalidRole:
                                    value:
                                        error: "Invalid role specified"
                                        errorCode: "INVALID_ROLE"
                "401":
                    $ref: "#/components/responses/Unauthorized"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "500":
                    $ref: "#/components/responses/InternalServerError"

        post:
            summary: Create new user
            description: |
                Creates a new user account in the system. This administrative endpoint allows 
                for the creation of users with different role levels.

                Required information includes:
                - Email address (must be unique in the system)
                - Initial password (will be hashed before storage)
                - Full name
                - Role assignment (amministratore, dipendentecomunale, or sorvegliante)

                User roles determine access permissions:
                - amministratore: Full system access including user management
                - dipendentecomunale: Access to view and manage events
                - sorvegliante: Access to confirm events and manage surveillance streams

                Newly created users can immediately log in with their credentials.
                This endpoint is restricted to administrators only.
            tags:
                - Users
            security:
                - BearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/CreateUserRequest"
                        examples:
                            createAdmin:
                                value:
                                    email: "nuovo.admin@comune.it"
                                    password: "Password!Sicura123"
                                    name: "Paolo Verdi"
                                    role: "amministratore"
                            createUser:
                                value:
                                    email: "nuovo.dipendente@comune.it"
                                    password: "Password!Dipendente456"
                                    name: "Giulia Bianchi"
                                    role: "dipendentecomunale"
            responses:
                "201":
                    description: User created successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                    message:
                                        type: string
                                    user:
                                        $ref: "#/components/schemas/User"
                            examples:
                                userCreated:
                                    value:
                                        success: true
                                        message: "User created successfully"
                                        user:
                                            _id: "60d21b4667d0d8992e610c89"
                                            email: "nuovo.admin@comune.it"
                                            name: "Paolo Verdi"
                                            role: "amministratore"
                                            hash: "hashedpassword"
                "400":
                    description: Bad request
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                            examples:
                                missingFields:
                                    value:
                                        error: "All fields are required"
                                        errorCode: "MISSING_FIELDS"
                                userExists:
                                    value:
                                        error: "User already exists"
                                        errorCode: "USER_ALREADY_EXISTS"
                "401":
                    $ref: "#/components/responses/Unauthorized"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /users/{id}:
        parameters:
            - name: id
              in: path
              required: true
              description: The user ID
              schema:
                  type: string
        get:
            summary: Get user by ID
            description: |
                Retrieves detailed information about a specific user identified by their unique ID.
                This administrative endpoint provides complete user account details.

                The response includes:
                - User ID
                - Email address
                - Full name
                - Role assignment
                - Password hash (for verification purposes)

                This information is used for user account management, auditing, and troubleshooting.
                The user ID is typically obtained from the list of users or from system logs.

                This endpoint is restricted to administrators only.
            tags:
                - Users
            security:
                - BearerAuth: []
            responses:
                "200":
                    description: User retrieved successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/User"
                            examples:
                                adminUser:
                                    value:
                                        _id: "60d21b4667d0d8992e610c85"
                                        email: "admin@comune.it"
                                        name: "Mario Rossi"
                                        role: "amministratore"
                                        hash: "hashedpassword"
                                regularUser:
                                    value:
                                        _id: "60d21b4667d0d8992e610c86"
                                        email: "dipendente@comune.it"
                                        name: "Laura Bianchi"
                                        role: "dipendentecomunale"
                                        hash: "hashedpassword"
                "400":
                    description: Bad request - Invalid ID format
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                            examples:
                                invalidId:
                                    value:
                                        error: "Specified ID is not valid format"
                                        errorCode: "INVALID_ID"
                "401":
                    $ref: "#/components/responses/Unauthorized"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "404":
                    description: User not found
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                            examples:
                                userNotFound:
                                    value:
                                        error: "User not found"
                                        errorCode: "USER_NOT_FOUND"
                "500":
                    $ref: "#/components/responses/InternalServerError"

        patch:
            summary: Update user
            description: |
                Updates an existing user's account information. This administrative endpoint
                allows partial updates, meaning you can send only the fields that need to be changed.

                Modifiable fields include:
                - Email address (must remain unique in the system)
                - Full name
                - Role assignment

                Note that this endpoint does not update passwords. Password changes should be
                handled through the dedicated password change endpoint or password reset flow.

                Common update scenarios include:
                - Changing a user's role (promotion or responsibility change)
                - Updating contact information
                - Correcting name spelling

                This endpoint is restricted to administrators only, and administrators cannot
                modify their own accounts using this endpoint.
            tags:
                - Users
            security:
                - BearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/UpdateUserRequest"
                        examples:
                            updateRole:
                                value:
                                    role: "amministratore"
                            updateEmail:
                                value:
                                    email: "laura.bianchi.updated@comune.it"
                            updateName:
                                value:
                                    name: "Laura Bianchi-Rossi"
            responses:
                "200":
                    description: User updated successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/User"
                            examples:
                                updatedUser:
                                    value:
                                        _id: "60d21b4667d0d8992e610c86"
                                        email: "laura.bianchi.updated@comune.it"
                                        name: "Laura Bianchi-Rossi"
                                        role: "amministratore"
                                        hash: "hashedpassword"
                "400":
                    description: Bad request
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                            examples:
                                emailInUse:
                                    value:
                                        error: "Email already in use"
                                        errorCode: "EMAIL_ALREADY_IN_USE"
                                missingFields:
                                    value:
                                        error: "All fields are required"
                                        errorCode: "MISSING_FIELDS"
                                invalidId:
                                    value:
                                        error: "Specified ID is not valid format"
                                        errorCode: "INVALID_ID"
                "401":
                    $ref: "#/components/responses/Unauthorized"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "404":
                    description: User not found
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                            examples:
                                userNotFound:
                                    value:
                                        error: "User not found"
                                        errorCode: "USER_NOT_FOUND"
                "500":
                    $ref: "#/components/responses/InternalServerError"

        delete:
            summary: Delete user
            description: |
                Permanently removes a user account from the system. This operation cannot be undone.

                Deletion should be used carefully, typically in these situations:
                - Employees who no longer work for the organization
                - Test accounts that are no longer needed
                - Accounts created in error

                When a user is deleted:
                - They can no longer log in to the system
                - Their account information is permanently removed

                This endpoint is restricted to administrators only, and administrators cannot
                delete their own accounts using this endpoint.
            tags:
                - Users
            security:
                - BearerAuth: []
            responses:
                "200":
                    description: User deleted successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                            examples:
                                deletedSuccess:
                                    value:
                                        message: "User deleted successfully"
                "400":
                    description: Bad request - Invalid ID format
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                            examples:
                                invalidId:
                                    value:
                                        error: "Specified ID is not valid format"
                                        errorCode: "INVALID_ID"
                "401":
                    $ref: "#/components/responses/Unauthorized"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "404":
                    description: User not found
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                            examples:
                                userNotFound:
                                    value:
                                        error: "User not found"
                                        errorCode: "USER_NOT_FOUND"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /users/{id}/events:
        parameters:
            - name: id
              in: path
              required: true
              description: The user ID
              schema:
                  type: string
        get:
            summary: Get events confirmed by user
            description: |
                Retrieves a list of all events that have been confirmed by a specific surveillance officer.
                This administrative endpoint provides accountability and audit tracking for event confirmations.

                The endpoint only works for users with the 'sorvegliante' (surveillance officer) role,
                as only they have the authority to confirm events in the system.

                The response includes complete details of each confirmed event, including:
                - Event identification and classification
                - Timestamps for creation and confirmation
                - Location details
                - Status and severity information
                - Camera and video evidence links

                This information is used for performance monitoring, accountability, and audit purposes.
                This endpoint is restricted to administrators only.
            tags:
                - Users
            security:
                - BearerAuth: []
            responses:
                "200":
                    description: Events confirmed by user retrieved successfully
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Event"
                            examples:
                                confirmedEvents:
                                    value:
                                        - _id: "60d21b4667d0d8992e610c85"
                                          type: "incidente"
                                          title: "Auto contro semaforo in Via Roma"
                                          description: "Incidente con danni alla segnaletica. Intervento tecnico richiesto."
                                          createdAt: "2025-05-15T09:42:01.646Z"
                                          updatedAt: "2025-05-15T09:42:01.646Z"
                                          eventDate: "2025-05-15T09:42:01.646Z"
                                          location:
                                              address: "Via Roma 1, Trento"
                                              coordinates: [11.1207, 46.0678]
                                          status: "solved"
                                          cameraId: "665fe9b27d204f50ae7c8d4a"
                                          videoUrl: "https://video.com/sample1.mp4"
                                          confirmed: true
                                          confirmedBy: "60d21b4667d0d8992e610c87"
                                          severity: "alta"
                                        - _id: "60d21b4667d0d8992e610c86"
                                          type: "ingorgo"
                                          title: "Traffico intenso in Via Manci"
                                          description: "Blocco temporaneo causa lavori stradali. Deviazioni consigliate su Via Belenzani."
                                          createdAt: "2025-05-14T08:20:00.000Z"
                                          updatedAt: "2025-05-14T08:45:00.000Z"
                                          eventDate: "2025-05-14T08:00:00.000Z"
                                          location:
                                              address: "Via Manci, Trento"
                                              coordinates: [11.1252, 46.0693]
                                          status: "pending"
                                          cameraId: "665fe9b27d204f50ae7c8d4a"
                                          videoUrl: "https://video.com/sample2.mp4"
                                          confirmed: true
                                          confirmedBy: "60d21b4667d0d8992e610c87"
                                          severity: "media"
                "400":
                    description: Bad request
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                            examples:
                                invalidUser:
                                    value:
                                        error: "Only users with 'sorvegliante' role can confirm events"
                                        errorCode: "INVALID_USER"
                                invalidId:
                                    value:
                                        error: "Specified ID is not valid format"
                                        errorCode: "INVALID_ID"
                "401":
                    $ref: "#/components/responses/Unauthorized"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "404":
                    description: User or events not found
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                            examples:
                                userNotFound:
                                    value:
                                        error: "User not found"
                                        errorCode: "USER_NOT_FOUND"
                                noEvents:
                                    value:
                                        error: "No events found for this user"
                                        errorCode: "NO_EVENTS_FOUND"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /users/me:
        patch:
            summary: Change Password
            description: |
                Allows a logged-in user to change their own password. This endpoint is available to all
                authenticated users regardless of role.

                Security features:
                - Requires valid authentication
                - Cannot reuse the current password
                - Password is hashed before storage

                This endpoint is a self-service feature that allows users to proactively manage their
                account security without administrator intervention.

                After a successful password change, existing sessions remain valid, but new logins
                will require the new password.
            tags:
                - User Profile
            security:
                - BearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                newpassword:
                                    type: string
                                    description: New password
                        examples:
                            example1:
                                value:
                                    newpassword: "Nuova!Password#Sicura456"
                                summary: Standard password change request
            responses:
                "200":
                    description: Password changed successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                        description: Whether the password change was successful
                                    message:
                                        type: string
                                        description: Success message
                            examples:
                                success:
                                    value:
                                        success: true
                                        message: "Password changed successfully"
                "400":
                    description: Bad request
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                            examples:
                                missingPassword:
                                    value:
                                        error: "New password is required"
                                        errorCode: "MISSING_NEW_PASSWORD"
                                samePassword:
                                    value:
                                        error: "New password cannot be the same as the old password"
                                        errorCode: "SAME_PASSWORD"
                "401":
                    $ref: "#/components/responses/Unauthorized"
                "500":
                    $ref: "#/components/responses/InternalServerError"
    # Stream API endpoints
    /streams:
        get:
            summary: Get active streams
            description: |
                Retrieves a list of all currently active surveillance camera streams in the system.
                This endpoint provides information about live video feeds that can be monitored.

                The response includes:
                - Stream identification
                - Associated camera information
                - Stream connection details (URL, key)
                - Stream status and statistics
                - Start time and duration

                This information is used by the surveillance interface to display available
                camera feeds and their status. Streams that are not currently active are not included
                in the response.

                Requires valid authentication with appropriate permissions.
            tags:
                - Streams
            security:
                - BearerAuth: []
            responses:
                "200":
                    description: |
                        Successfully retrieved the list of active streams. The response includes an array of stream
                        objects with details like stream ID, camera ID, stream URL, and status.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                        description: Indicates if the request was successful
                                    streams:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/StreamResponse"
                            examples:
                                success:
                                    value:
                                        success: true
                                        streams:
                                            [
                                                {
                                                    _id: "60d21b4667d0d8992e610c85",
                                                    cameraId: "68266cd1683978f9108a7393",
                                                    streamKey: "stream_piazza_duomo_cam1",
                                                    streamUrl: "rtsp://cameras.comune.trento.it/piazza_duomo_cam1",
                                                    isActive: true,
                                                    startTime: "2025-05-14T10:00:00Z",
                                                    endTime: null,
                                                    streamType: "rtsp",
                                                    viewCount: 5,
                                                },
                                                {
                                                    _id: "60d21b4667d0d8992e610c86",
                                                    cameraId: "68266cd1683978f9108a7394",
                                                    streamKey: "stream_via_belenzani_cam2",
                                                    streamUrl: "rtsp://cameras.comune.trento.it/via_belenzani_cam2",
                                                    isActive: true,
                                                    startTime: "2025-05-14T09:30:00Z",
                                                    endTime: null,
                                                    streamType: "rtsp",
                                                    viewCount: 2,
                                                },
                                            ]
                "401":
                    $ref: "#/components/responses/Unauthorized"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "500":
                    $ref: "#/components/responses/InternalServerError"
        post:
            summary: Create a new stream
            description: |
                Initiates a new surveillance camera stream in the system. This endpoint is used when
                a new camera feed needs to be added for monitoring.

                Required information includes:
                - Camera ID (must reference an existing camera)
                - Stream URL (the connection URL for the video feed)
                - Stream type (RTSP, HLS, or WebRTC protocol)

                Optional information:
                - Stream key (a unique identifier, generated automatically if not provided)

                When a stream is created:
                - It is immediately marked as active
                - The start time is recorded
                - Initial view count is set to zero
                - It becomes available for monitoring in the surveillance interface

                Requires valid authentication with appropriate permissions.
            tags:
                - Streams
            security:
                - BearerAuth: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                cameraId:
                                    type: string
                                    description: ID of the associated camera
                                streamKey:
                                    type: string
                                    description: Unique key for the stream
                                streamUrl:
                                    type: string
                                    description: URL of the stream
                                streamType:
                                    type: string
                                    enum: [rtsp, hls, webrtc]
                                    description: Stream type
                            required:
                                - cameraId
                                - streamUrl
                                - streamType
                        examples:
                            example1:
                                value:
                                    cameraId: "68266cd1683978f9108a7393"
                                    streamKey: "stream_piazza_duomo_sud"
                                    streamUrl: "rtsp://cameras.comune.trento.it/piazza_duomo_sud"
                                    streamType: "rtsp"
            responses:
                "201":
                    description: Stream created successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                        description: Indicates if the request was successful
                                    stream:
                                        $ref: "#/components/schemas/StreamDetails"
                            examples:
                                created:
                                    value:
                                        success: true
                                        stream:
                                            {
                                                _id: "60d21b4667d0d8992e610c85",
                                                cameraId: "68266cd1683978f9108a7393",
                                                streamKey: "stream_piazza_duomo_sud",
                                                streamUrl: "rtsp://cameras.comune.trento.it/piazza_duomo_sud",
                                                isActive: true,
                                                startTime: "2025-05-14T10:00:00Z",
                                                streamType: "rtsp",
                                                viewCount: 0,
                                            }
                "400":
                    description: Missing or invalid fields
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                            examples:
                                missingFields:
                                    value:
                                        error: "Missing required fields"
                                        errorCode: "MISSING_FIELDS"
                "401":
                    $ref: "#/components/responses/Unauthorized"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /streams/{id}:
        get:
            summary: Obtain stream details
            description: |
                Retrieves detailed information about a specific surveillance camera stream identified by its unique ID.
                This endpoint provides complete stream configuration and status data.

                The response includes:
                - Stream identification
                - Associated camera information
                - Stream connection details (URL, key)
                - Stream status and statistics
                - Start and end times (if applicable)
                - View count and access statistics

                This information is used for stream management, troubleshooting, and auditing purposes.
                The stream ID is typically obtained from the list of active streams.

                Requires valid authentication with appropriate permissions.
            tags:
                - Streams
            security:
                - BearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: Stream ID
                  schema:
                      type: string
            responses:
                "200":
                    description: Successfully retrieved stream details
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                        description: Indicates if the request was successful
                                    stream:
                                        $ref: "#/components/schemas/StreamDetails"
                "400":
                    description: Bad request - Invalid ID format
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                            examples:
                                invalidId:
                                    value:
                                        error: "Specified ID is not valid format"
                                        errorCode: "INVALID_ID"
                "401":
                    $ref: "#/components/responses/Unauthorized"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "404":
                    description: Stream not found
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                            examples:
                                notFound:
                                    value:
                                        error: "Stream not found"
                                        errorCode: "STREAM_NOT_FOUND"
                "500":
                    $ref: "#/components/responses/InternalServerError"
        patch:
            summary: Update existing stream parameters
            description: |
                Modifies the configuration or status of an existing surveillance camera stream.
                This endpoint allows partial updates, meaning you can send only the fields that need to be changed.

                Modifiable fields include:
                - Stream key (the unique identifier)
                - Stream URL (the connection URL for the video feed)
                - Active status (can be toggled on/off)
                - Stream type (protocol used)

                Common update scenarios include:
                - Changing the stream URL when camera network configuration changes
                - Updating the stream key for security purposes
                - Temporarily disabling a stream during maintenance
                - Changing the streaming protocol

                This endpoint does not modify view count or timestamp information, which are
                managed automatically by the system.

                Requires valid authentication with appropriate permissions.
            tags:
                - Streams
            security:
                - BearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: ID of the stream to update
                  schema:
                      type: string
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                streamKey:
                                    type: string
                                    description: Unique key for the stream
                                streamUrl:
                                    type: string
                                    description: URL of the stream
                                isActive:
                                    type: boolean
                                    description: Indicates if the stream is active
                                streamType:
                                    type: string
                                    enum: [rtsp, hls, webrtc]
                                    description: Stream type
                        examples:
                            updateStream:
                                value:
                                    streamKey: "stream_piazza_duomo_sud_new"
                                    streamUrl: "rtsp://cameras.comune.trento.it/piazza_duomo_sud_new"
                                    isActive: true
            responses:
                "200":
                    description: Stream updated successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                        description: Indicates if the request was successful
                                    stream:
                                        $ref: "#/components/schemas/StreamDetails"
                            examples:
                                success:
                                    value:
                                        success: true
                                        stream:
                                            {
                                                _id: "60d21b4667d0d8992e610c85",
                                                cameraId: "68266cd1683978f9108a7393",
                                                streamKey: "stream_piazza_duomo_sud_new",
                                                streamUrl: "rtsp://cameras.comune.trento.it/piazza_duomo_sud_new",
                                                isActive: true,
                                                startTime: "2025-05-14T10:00:00Z",
                                                streamType: "rtsp",
                                                viewCount: 5,
                                            }
                "400":
                    description: Bad request
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                            examples:
                                invalidUpdateData:
                                    value:
                                        error: "Input update data not valid"
                                        errorCode: "INVALID_UPDATE_DATA"
                                invalidId:
                                    value:
                                        error: "Specified ID is not valid format"
                                        errorCode: "INVALID_ID"
                "401":
                    $ref: "#/components/responses/Unauthorized"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "404":
                    description: Stream not found
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                            examples:
                                notFound:
                                    value:
                                        error: "Stream not found"
                                        errorCode: "STREAM_NOT_FOUND"
                "500":
                    $ref: "#/components/responses/InternalServerError"

    /streams/{id}/end:
        patch:
            summary: End a stream
            description: |
                Terminates an active surveillance camera stream. This endpoint changes the stream status
                to inactive and records the end time.

                When a stream is ended:
                - Its status is changed to inactive (isActive = false)
                - The current timestamp is recorded as the end time
                - It is no longer available for live monitoring
                - Historical information remains accessible

                This endpoint is used when:
                - A camera is being taken offline for maintenance
                - A temporary surveillance operation has concluded
                - Stream quality issues require reconnection

                Terminated streams can be reactivated by updating them with the stream update endpoint.
                Requires valid authentication with appropriate permissions.
            tags:
                - Streams
            security:
                - BearerAuth: []
            parameters:
                - name: id
                  in: path
                  required: true
                  description: ID of the stream to end
                  schema:
                      type: string
            responses:
                "200":
                    description: Stream ended successfully
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    success:
                                        type: boolean
                                        description: Indicates if the request was successful
                                    stream:
                                        $ref: "#/components/schemas/StreamDetails"
                            examples:
                                success:
                                    value:
                                        success: true
                                        stream:
                                            {
                                                _id: "60d21b4667d0d8992e610c85",
                                                cameraId: "68266cd1683978f9108a7393",
                                                streamKey: "stream_piazza_duomo_sud",
                                                streamUrl: "rtsp://cameras.comune.trento.it/piazza_duomo_sud",
                                                isActive: false,
                                                startTime: "2025-05-14T10:00:00Z",
                                                endTime: "2025-05-14T11:30:00Z",
                                                streamType: "rtsp",
                                                viewCount: 7,
                                            }
                "400":
                    description: Bad request - Invalid ID format
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                            examples:
                                invalidId:
                                    value:
                                        error: "Specified ID is not valid format"
                                        errorCode: "INVALID_ID"
                "401":
                    $ref: "#/components/responses/Unauthorized"
                "403":
                    $ref: "#/components/responses/Forbidden"
                "404":
                    description: Stream not found
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ErrorResponse"
                            examples:
                                notFound:
                                    value:
                                        error: "Stream not found"
                                        errorCode: "STREAM_NOT_FOUND"
                "500":
                    $ref: "#/components/responses/InternalServerError"

components:
    securitySchemes:
        BearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT

    schemas:
        LoginRequest:
            type: object
            required:
                - email
                - password
            properties:
                email:
                    type: string
                    description: User's email address used for authentication (must be registered in the system)
                    example: "dipendente@comune.it"
                password:
                    type: string
                    description: User's password for authentication (case-sensitive, must match stored credentials)
                    format: password
                    example: "Password!Sicura123"

        LoginResponse:
            type: object
            properties:
                token:
                    type: string
                    description: JWT access token that must be included in subsequent API requests as a Bearer token
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwZDIxYjQ2NjdkMGQ4OTkyZTYxMGM4NiIsImVtYWlsIjoiZGlwZW5kZW50ZUBjb211bmUuaXQiLCJyb2xlIjoiZGlwZW5kZW50ZWNvbXVuYWxlIiwiaWF0IjoxNjI0MTkzMzYxLCJleHAiOjE2MjQyNzk3NjF9.7tKm-Vj8iec7OVaCb5QdoIfwkR-RG2djUXMT2Yz4IhM"
                success:
                    type: boolean
                    description: Whether the login attempt was successful
                    example: true
                user:
                    type: object
                    properties:
                        email:
                            type: string
                            description: User's email address
                            example: "dipendente@comune.it"
                        name:
                            type: string
                            description: User's full name
                            example: "Laura Bianchi"
                        role:
                            type: string
                            description: User's role in the system which determines access permissions
                            enum: [amministratore, sorvegliante, dipendentecomunale]
                            example: "dipendentecomunale"

        ErrorResponse:
            type: object
            properties:
                error:
                    type: string
                    description: Human-readable error message explaining what went wrong
                    example: "Invalid credentials provided"
                errorCode:
                    type: string
                    description: Machine-readable error code for programmatic handling of errors
                    example: "INVALID_CREDENTIALS"

        Event:
            type: object
            properties:
                _id:
                    type: string
                    description: Unique identifier for the event
                    example: "60d21b4667d0d8992e610c85"
                type:
                    type: string
                    enum: [incidente, ingorgo]
                    description: Type of event (accident or traffic jam)
                    example: "incidente"
                title:
                    type: string
                    description: Short title describing the event
                    example: "Incidente in Via Roma"
                description:
                    type: string
                    description: Detailed description of the event, including relevant details and observations
                    example: "Tamponamento tra due veicoli con danni lievi. Traffico rallentato."
                createdAt:
                    type: string
                    format: date-time
                    description: Timestamp when the event was created in the system
                    example: "2025-05-15T09:42:01.646Z"
                updatedAt:
                    type: string
                    format: date-time
                    description: Timestamp when the event was last updated
                    example: "2025-05-15T10:15:00.000Z"
                eventDate:
                    type: string
                    format: date-time
                    description: Actual date and time when the event occurred
                    example: "2025-05-15T09:30:00.000Z"
                location:
                    type: object
                    description: Location information where the event occurred
                    properties:
                        address:
                            type: string
                            description: Human-readable address of the event location
                            example: "Via Roma 45, Trento"
                        coordinates:
                            type: array
                            description: Geographic coordinates [longitude, latitude]
                            items:
                                type: number
                            example: [11.1207, 46.0678]
                status:
                    type: string
                    enum: [pending, solved, unsolved, false_alarm]
                    description: Current status of the event (pending=awaiting action, solved=resolved, unsolved=active but unresolved, false_alarm=incorrectly reported)
                    example: "pending"
                cameraId:
                    type: string
                    description: ID of the camera that detected or recorded the event
                    example: "665fe9b27d204f50ae7c8d4a"
                videoUrl:
                    type: string
                    description: URL to access video footage of the event
                    example: "https://video.comune.trento.it/events/60d21b4667d0d8992e610c85.mp4"
                confirmed:
                    type: boolean
                    description: Whether the event has been confirmed by a surveillance officer
                    example: true
                confirmedBy:
                    type: string
                    description: ID of the user (surveillance officer) who confirmed the event
                    example: "60d21b4667d0d8992e610c87"
                notifiedServices:
                    type: array
                    description: List of emergency services that have been notified about this event
                    items:
                        type: object
                        properties:
                            service:
                                type: string
                                enum:
                                    [
                                        polizia,
                                        carabinieri,
                                        vigili_del_fuoco,
                                        ambulanza,
                                        protezione_civile,
                                    ]
                                description: Type of emergency service notified
                                example: "polizia"
                            notifiedAt:
                                type: string
                                format: date-time
                                description: Timestamp when the service was notified
                                example: "2025-05-15T09:45:00.000Z"
                            responseTime:
                                type: number
                                description: Response time in minutes from notification to arrival
                                example: 8
                severity:
                    type: string
                    enum: [bassa, media, alta]
                    description: Assessed severity level of the event (bassa=low, media=medium, alta=high)
                    example: "media"

        PublicEvent:
            description: "Public version of the Event schema with limited information for citizen access"
            type: object
            properties:
                _id:
                    type: string
                    description: Event unique identifier
                    example: "60d21b4667d0d8992e610c85"
                type:
                    type: string
                    enum: [incidente, ingorgo]
                    description: Type of event (accident or traffic jam)
                    example: "incidente"
                title:
                    type: string
                    description: Short title describing the event
                    example: "Incidente in Via Roma"
                description:
                    type: string
                    description: Public description of the event, with sensitive details removed
                    example: "Traffico rallentato causa incidente. Si consiglia percorso alternativo."
                eventDate:
                    type: string
                    format: date-time
                    description: Date and time when the event occurred
                    example: "2025-05-15T09:30:00.000Z"
                location:
                    type: object
                    properties:
                        address:
                            type: string
                            description: Address of the event location
                            example: "Via Roma 45, Trento"
                status:
                    type: string
                    enum: [solved, unsolved]
                    description: Whether the event has been resolved (only shows solved or unsolved status)
                    example: "unsolved"
                severity:
                    type: string
                    enum: [bassa, media, alta]
                    description: Severity level to indicate impact on traffic and public safety
                    example: "media"

        User:
            type: object
            properties:
                _id:
                    type: string
                    description: User unique identifier
                    example: "60d21b4667d0d8992e610c85"
                email:
                    type: string
                    description: User's email address
                    example: "admin@comune.it"
                name:
                    type: string
                    description: User's full name
                    example: "Mario Rossi"
                role:
                    type: string
                    description: User's role
                    enum: [amministratore, sorvegliante, dipendentecomunale]
                    example: "amministratore"
                hash:
                    type: string
                    description: User's hashed password
                    example: "$2b$10$VjvZ5y6Z5y6Z5y6Z5y6Z5e"

        CreateUserRequest:
            type: object
            required:
                - email
                - password
                - name
                - role
            properties:
                email:
                    type: string
                    description: User's email address
                    example: "nuovo.admin@comune.it"
                password:
                    type: string
                    description: User's password
                    format: password
                    example: "Password!Sicura123"
                name:
                    type: string
                    description: User's full name
                    example: "Paolo Verdi"
                role:
                    type: string
                    description: User's role
                    enum: [amministratore, sorvegliante, dipendentecomunale]
                    example: "amministratore"

        UpdateUserRequest:
            type: object
            properties:
                email:
                    type: string
                    description: User's email address
                    example: "laura.bianchi.updated@comune.it"
                name:
                    type: string
                    description: User's full name
                    example: "Laura Bianchi-Rossi"
                role:
                    type: string
                    description: User's role
                    enum: [amministratore, sorvegliante, dipendentecomunale]
                    example: "dipendentecomunale"

        Camera:
            description: "Represents a camera in the system"
            type: object
            properties:
                id:
                    type: string
                    description: Camera unique identifier
                    example: "60d21b4667d0d8992e610c85"
                name:
                    type: string
                    description: Camera name
                    example: "Camera Piazza Duomo"
                location:
                    type: object
                    properties:
                        address:
                            type: string
                            description: Address of the camera location
                            example: "Piazza Duomo, Trento"
                installationDate:
                    type: string
                    format: date-time
                    description: Installation date of the camera
                    example: "2025-05-01T10:00:00Z"
                lastMaintenance:
                    type: string
                    format: date-time
                    description: Last maintenance date of the camera
                    example: "2025-05-10T10:00:00Z"
                isActive:
                    type: boolean
                    description: Indicates if the camera is active
                    example: true
                ipAddress:
                    type: string
                    description: IP address of the camera
                    example: "192.168.1.10"
                streamUrl:
                    type: string
                    description: URL of the camera stream
                    example: "rtsp://cameras.comune.trento.it/piazza_duomo_cam1"
                modelInfo:
                    type: object
                    properties:
                        brand:
                            type: string
                            description: Camera brand name
                            example: "Hikvision"
                        model:
                            type: string
                            description: Camera model name
                            example: "DS-2CD2142FWD-I"

        StreamResponse:
            description: "Basic information about an active video stream"
            type: object
            properties:
                _id:
                    type: string
                    description: Stream unique identifier
                    example: "60d21b4667d0d8992e610c85"
                cameraId:
                    type: string
                    description: ID of the associated surveillance camera
                    example: "68266cd1683978f9108a7393"
                streamKey:
                    type: string
                    description: Unique key used to identify and access the stream
                    example: "stream_piazza_duomo_cam1"
                streamUrl:
                    type: string
                    description: URL where the stream can be accessed
                    example: "rtsp://cameras.comune.trento.it/piazza_duomo_cam1"
                isActive:
                    type: boolean
                    description: Whether the stream is currently active and broadcasting
                    example: true
                startTime:
                    type: string
                    format: date-time
                    description: When the stream was started
                    example: "2025-05-14T10:00:00Z"
                endTime:
                    type: string
                    format: date-time
                    description: When the stream was ended (null if still active)
                    example: null
                streamType:
                    type: string
                    enum: [rtsp, hls, webrtc]
                    description: Protocol used for the video stream
                    example: "rtsp"
                viewCount:
                    type: integer
                    description: Number of times the stream has been viewed
                    example: 5
                lastAccessed:
                    type: string
                    format: date-time
                    description: When the stream was last accessed by a user
                    example: "2025-05-14T10:45:12Z"

        StreamDetails:
            description: "Complete details about a video stream including all metadata"
            type: object
            properties:
                _id:
                    type: string
                    description: Stream unique identifier
                    example: "60d21b4667d0d8992e610c85"
                cameraId:
                    type: string
                    description: ID of the associated surveillance camera
                    example: "68266cd1683978f9108a7393"
                streamKey:
                    type: string
                    description: Unique key used to identify and access the stream
                    example: "stream_piazza_duomo_cam1"
                streamUrl:
                    type: string
                    description: URL where the stream can be accessed
                    example: "rtsp://cameras.comune.trento.it/piazza_duomo_cam1"
                isActive:
                    type: boolean
                    description: Whether the stream is currently active and broadcasting
                    example: true
                startTime:
                    type: string
                    format: date-time
                    description: When the stream was started
                    example: "2025-05-14T10:00:00Z"
                endTime:
                    type: string
                    format: date-time
                    description: When the stream was ended (null if still active)
                    example: null
                streamType:
                    type: string
                    enum: [rtsp, hls, webrtc]
                    description: Protocol used for the video stream
                    example: "rtsp"
                viewCount:
                    type: integer
                    description: Number of times the stream has been viewed
                    example: 5
                lastAccessed:
                    type: string
                    format: date-time
                    description: When the stream was last accessed by a user
                    example: "2025-05-14T10:45:12Z"
                resolution:
                    type: string
                    description: Video resolution of the stream
                    example: "1920x1080"
                frameRate:
                    type: number
                    description: Frame rate of the video stream in frames per second
                    example: 25
                bandwidthUsage:
                    type: number
                    description: Bandwidth consumption in Mbps
                    example: 4.5

    responses:
        Unauthorized:
            description: |
                Authentication failure. The request lacks valid authentication credentials or the provided
                credentials are invalid. The client should either provide valid credentials or obtain
                new ones through the login endpoint.
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/ErrorResponse"
                    examples:
                        tokenRequired:
                            value:
                                error: "Authentication token required"
                                errorCode: "TOKEN_REQUIRED"
                        invalidToken:
                            value:
                                error: "Invalid or expired token"
                                errorCode: "INVALID_TOKEN"

        Forbidden:
            description: |
                Authorization failure. The authenticated user does not have sufficient permissions
                to access this resource or perform this operation. This typically happens when a user
                with a lower-privilege role attempts to access admin-only endpoints or when a user
                attempts to modify resources they don't own.
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/ErrorResponse"
                    examples:
                        unauthorizedRole:
                            value:
                                error: "Unauthorized role"
                                errorCode: "UNAUTHORIZED_ROLE"
                        selfModification:
                            value:
                                error: "Cannot modify your own account"
                                errorCode: "SELF_MODIFICATION_FORBIDDEN"
                        selfDeletion:
                            value:
                                error: "Cannot delete your own account"
                                errorCode: "SELF_DELETION_FORBIDDEN"

        InternalServerError:
            description: |
                The server encountered an unexpected condition that prevented it from fulfilling the request.
                This is a generic server error and does not indicate a problem with the client request.
                Administrators should check server logs for more details about what went wrong.
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/ErrorResponse"
                    examples:
                        serverError:
                            value:
                                error: "Internal server error"
                                errorCode: "INTERNAL_SERVER_ERROR"
