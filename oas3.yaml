openapi: 3.0.4
info:
  version: '1.0'
  title: "AiLERT API"
  description: API for the AiLERT application.
  license:
    name: MIT

servers:
  - url: http://localhost:8080/api/v1
    description: Local development server
  - url: https://example.com/api/v1
    description: Production server

paths:
  /auth/login:
    post:
      summary: User Login
      description: 
        Authenticate user and generate JWT token. **IMPORTANT:** Ensure to use HTTPS in production for security.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              dipendentecomunale:
                value:
                  email: 'john.doe@example.com'
                  password: 'securepassword123'
              amministratore:
                value:
                  email: 'bob@bob.com'
                  password: 'password'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/changepass:
    post:
      summary: Change Password
      description: 
        Change the user's password. Requires authentication.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newpassword:
                  type: string
                  description: New password
                
            examples:
              example1:
                value:
                  newpassword: 'newSecurePassword456'
                summary: Standard password change request
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the password change was successful
                  message:
                    type: string
                    description: Success message
              examples:
                success:
                  value:
                    success: true
                    message: 'Password changed successfully'
        '401':
          description: Unauthorized access (invalid user)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                userNotFound:
                  value:
                    error: 'Invalid email'
                    errorCode: 'INVALID_EMAIL'
                authTokenRequired:
                  value:
                    error: 'Authentication token required'
                    errorCode: 'TOKEN_REQUIRED'
                invalidToken:
                  value:
                    error: 'Invalid or expired token'
                    errorCode: 'INVALID_TOKEN'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                serverError:
                  value:
                    error: 'Internal server error'
                    errorCode: 'INTERNAL_SERVER_ERROR'
  /events:
    get:
      summary: Ottieni tutti gli eventi
      description: Restituisce la lista di eventi. Richiede autenticazione.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Lista ottenuta con successo
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
              examples:
                exampleResponse:
                  summary: Esempio di lista eventi
                  value:
                    - type: incidente
                      title: "Auto contro semaforo"
                      description: "Incidente lieve senza feriti"
                      createdAt: "2025-05-15T09:42:01.646Z"
                      updatedAt: "2025-05-15T09:42:01.646Z"
                      eventDate: "2025-05-15T09:42:01.646Z"
                      location:
                        address: "Via Roma 1, Trento"
                      status: pending
                      cameraId: "665fe9b27d204f50ae7c8d4a"
                      videoUrl: "https://video.com/sample1.mp4"
                      confirmed: true
                      confirmedBy: "665fe9b27d204f50ae7c8d4a"
                      notifiedServices:
                        - service: ambulanza
                          notifiedAt: "2025-05-15T09:42:01.646Z"
                          responseTime: 7
                      severity: alta
                    - type: ingorgo
                      title: "Traffico in via Manci"
                      description: "Blocco temporaneo causa lavori"
                      createdAt: "2025-05-14T08:20:00.000Z"
                      updatedAt: "2025-05-14T08:45:00.000Z"
                      eventDate: "2025-05-14T08:00:00.000Z"
                      location:
                        address: "Via Manci, Trento"
                      status: solved
                      cameraId: "665fe9b27d204f50ae7c8d4a"
                      videoUrl: "https://video.com/sample2.mp4"
                      confirmed: false
                      severity: media
        '401':
          description: Utente non autenticato
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidToken:
                  value:
                    error: 'Unauthorized role'
                    errorCode: 'UNAUTHORIZED_ROLE'
    post:
      summary: Crea un nuovo evento
      description: Registra un nuovo evento (incidente o ingorgo). Richiede autenticazione.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
            examples:
              validEventExample:
                summary: Esempio valido per test POST
                value:
                  type: incidente
                  title: "Auto contro semaforo"
                  description: "Incidente con danni leggeri"
                  eventDate: "2025-05-15T09:42:01.646Z"
                  location:
                    address: "Via Verdi 10, Trento"
                  status: pending
                  cameraId: "665fe9b27d204f50ae7c8d4a"
                  videoUrl: "https://video.com/sample.mp4"
                  confirmed: true
                  confirmedBy: "665fe9b27d204f50ae7c8d4a"
                  notifiedServices:
                    - service: polizia
                      notifiedAt: "2025-05-15T09:42:01.646Z"
                      responseTime: 5
                  severity: media
      responses:
        '201':
          description: Evento creato con successo
        '400':
          description: Errore nei dati inviati
        '401':
          description: Utente non autenticato
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidToken:
                  value:
                    error: 'Unauthorized role'
                    errorCode: 'UNAUTHORIZED_ROLE'


components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: User's email address
        password:
          type: string
          description: User's password
          format: password

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT access token
        success:
          type: boolean
          description: Whether the login was successful

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
        errorCode:
          type: string
          description: Specific error code for the failure
    
    Event:
      type: object
      properties:
        type:
          type: string
          enum: [incidente, ingorgo]
        title:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        eventDate:
          type: string
          format: date-time
        location:
          type: object
          properties:
            address:
              type: string
        status:
          type: string
          enum: [pending, solved, unsolved, false_alarm]
        cameraId:
          type: string
        videoUrl:
          type: string
        confirmed:
          type: boolean
        confirmedBy:
          type: string
        notifiedServices:
          type: array
          items:
            type: object
            properties:
              service:
                type: string
                enum: [polizia, carabinieri, vigili_del_fuoco, ambulanza, protezione_civile]
              notifiedAt:
                type: string
                format: date-time
              responseTime:
                type: number
        severity:
          type: string
          enum: [bassa, media, alta]
